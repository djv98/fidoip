--- getfree.c.orig	2010-03-08 09:40:13.000000000 +0300
+++ getfree.c	2010-03-08 09:42:06.000000000 +0300
@@ -203,9 +203,8 @@
   /* we are not on any BSD-like OS */
   /* list other UNIX os'es without getfree mechanism here */
 #if defined( __svr4__ ) || defined( __SVR4 ) || defined (__linux__) && defined (__GLIBC__)
-#include <sys/statvfs.h>
-#ifndef _SYS_STATVFS_H
-#define _SYS_STATVFS_H
+#ifndef _SYS_STATFS_H
+#define _SYS_STATFS_H
 #elif !defined (__BEOS__)
 #include <sys/vfs.h>
 #endif /* BEOS */
@@ -230,33 +229,6 @@
 #if defined(_SYS_STATFS_H) || defined(_SYS_STATVFS_H)
 ULONG fc_GetDiskFreeSpace (const char *path)
 {
-#ifdef _SYS_STATVFS_H
-  struct statvfs sfs;
-
-  if (statvfs (path, &sfs) != 0)
-#else
-  struct statfs sfs;
-
-  if (statfs (path, &sfs) != 0)
-#endif
-  {
-    w_log (LL_ERR, "cannot statfs \"%s\", assume enough space", path);
-    return ULONG_MAX;
-  }
-  else
-  {
-    /* return (sfs.f_bsize * sfs.f_bfree); */
-    /* return (sfs.f_bsize * sfs.f_bavail); */
-    if (sfs.f_bsize >= 1024)
-      return ((sfs.f_bsize / 1024l) * sfs.f_bavail);
-    else
-      return (sfs.f_bavail / (1024l / sfs.f_bsize));
-  }
-}
-
-#else
-ULONG fc_GetDiskFreeSpace (const char *path)
-{
   w_log (LL_WARN, "warning: free space doesn't checked in %s",path);
   return ULONG_MAX;
 }
